<?php/** * Created by PhpStorm. * User: THINK * Date: 2018/3/27 * Time: 10:21 */namespace app\api\controller\v1;use app\api\controller\BaseController;use app\api\model\Order as OrderModel;use app\api\model\RefundOrder;use app\api\model\User;use app\api\model\ShopProductAccess;use app\api\model\Shoperinfo;use app\api\model\Shop;use app\api\model\SetMoney;use app\api\service\ShoperMessage;use app\api\validate\OrderGet;use app\api\validate\OrderNew;use app\api\validate\OrderStatus;use app\lib\exception\OrderException;use app\api\controller\WeiXinPay;use app\api\service\DeliveryMessage;use think\Cache;use think\Db;class Order extends BaseController{    //将xml格式转换成数组    private function xmlToArray($xml)    {        //禁止引用外部xml实体        libxml_disable_entity_loader(true);        $xmlstring = simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA);        $val = json_decode(json_encode($xmlstring), true);        return $val;    }    //添加订单    public function addOrder()    {        //验证传入值        $validate = new OrderNew();        $validate->goCheck();        $post = $validate->getDataByRule(input('post.'));        //备注        $post['note'] = input('post.note');        //获取用户信息        $data = $this->getUid();        //判断库存        $product = ShopProductAccess::getProduct($post['product_id']);        if (!$product){            return show(201,'没有库存，不能下单');        }        if($product->stock<4){            return show(201,'库存不足，不能下单');        }        // 商家信息        $shop_data = Shop::getByShopID($post['shop_id']);        if ($shop_data){            $post['service_fee'] = $shop_data->service_fee;        }else{            return show(201,'下单失败，暂无该商家');        }        //是否商家        if($data->user_role == 3){            return show(201,'您是商家，不能下单');        }else if($data->user_role == 2) {            return show(201, '您是骑手不能下单');        }else if($data->user_role == 1 && $data->getUserInfo->is_business==1){            //控制下单次数four            $count = OrderModel::getMonthOrder($data->user_id,1);            $post['is_business'] = 1;            $post['num'] = 4;        }else{            $count = OrderModel::getMonthOrder($data->user_id,0);            $post['num'] = 2;        }        //控制下单次数four        if($count>3){            return show(201,'一个月只能下4次单');        }        $lat = User::get($data->user_id)->getUserInfo->latitude;       $lng = User::get($data->user_id)->getUserInfo->longitude;       $shop_lat = $shop_data->latitude;       $shop_lng = $shop_data->longitude;        $now_distance = GetDistanceNews($lat,$lng,$shop_lat,$shop_lng);		        if ($now_distance>config('setting.distance')){            return show(201,'配送距离太远，请重新设置');       }        //地址        $addr_a = User::get($data->user_id)->getUserInfo->user_address;        $addr_b = User::get($data->user_id)->getUserInfo->user_address_detail;        $m_phone = User::get($data->user_id)->getUserInfo->user_phone;        $is_ele = User::get($data->user_id)->getUserInfo->user_iselevator;        $u_floor = User::get($data->user_id)->getUserInfo->user_floor;        $fre = Model('SetMoney')->where(['id'=>1])->find();        $post['o_address'] = $addr_a.''.$addr_b;        $post['o_phone'] = $m_phone;        //用户id        $post['user_id'] = $data->user_id;        $post['updatetime'] = $post['o_builddate'] = time();        $post['order_id'] = time().rand(0,9).rand(0,9).rand(0,9);        $service = Shop::get($post['shop_id']);        $post['price'] = floatval($post['price']);        //添加订单        (new OrderModel($post))->allowField(true)->save();        $data = OrderModel::getPayOrder($post['order_id']);        return show(200,'下单成功',["data"=>$data]);    }    //支付订单    public function payThisOrder()    {        //传入订单号        $id = input("post.id");        $order = OrderModel::get($id);        if (!$order){            return show(201,'订单不存在');        }        if($order->order_status!=1){            return show(201,'订单状态异常');        }        //判断库存        $product = ShopProductAccess::getProduct($order['product_id']);        if (!$product){            return show(201,'没有库存，不能下单');        }        if($product->stock<4){            return show(201,'库存不足，不能下单');        }        $User = $this->getUid();        //判断下单次数        if($User->getUserInfo->is_business==1){            $count = OrderModel::getMonthOrder($User->user_id,1);        }else if($User->getUserInfo->is_business==0){            $count = OrderModel::getMonthOrder($User->user_id,0);        }        //控制下单次数four        if($count >3){            return show(201,'一个月只能下4次单');        }        $openid = $User->user_wxid;        $body = '订单支付测试';        //商家服务费        $service = Shop::get($order->shop_id);        // print_r($order->price);die();        $total_fee = floatval($order->price)*100;        $out_trade_no = 'order'.'_'.time().'_'.$id;        //配置信息        $notify_url = config('setting.domain').'/api/v1/order/payThisOrderNotify';        $app_id = config('paySet.app_id');        $mch_id = config('paySet.mch_id');        $key = config('paySet.key');        //生成签名，返回给小程序                $pay = new WeiXinPay($app_id, $openid, $mch_id, $key, $out_trade_no, $body, $total_fee,$notify_url);        $return = $pay->pay();        //更新prepay_id,用于推送消息模板        $arrayPackage=explode("=",$return['package']);        $order->save(['prepay_id' =>$arrayPackage[1]],['id' =>$id]);        return $return;    }    //订单支付异步,回调地址    public function payThisOrderNotify()    {        $postXml = file_get_contents("php://input");        if (empty($postXml)) {            return false;        }        //获取回调参数更新数据        $result = $this->xmlToArray($postXml);        if ($result['return_code'] == 'FAIL') {            return false;        }        if ($result['result_code'] == 'FAIL') {            return false;        }        //Cache::set('hj',$result);        //获取订单号        $outTradeNo = $result['out_trade_no'];        $array = explode('_',$outTradeNo);        //从订单号中提取id        $id = $array[2];        $order= OrderModel::get($id);        //判断更新数据库        if (!$order) {            return false;        }else{            $user_id = $order['user_id'];            $product_id = $order->product_id;            $product_num = $order->num;            if($order->order_status!=1){                return false;            }            $order->save(['order_status' =>2],['id' =>$id]);            //更新库存            $puduct = new ShopProductAccess();            $puduct -> where('product_id',$product_id)->setDec('stock',$product_num);            //插入支付记录            $dep_data['type'] = 4 ;            $dep_data['order_id'] = $outTradeNo;            $dep_data['user_id'] = $user_id;            $dep_data['o_builddate']=time();            $dep_data['price'] = floatval( $result['total_fee']*0.01);            (new RefundOrder())->save($dep_data);            return true;        }        return false;    }    // 获取骑手过去所有订单    public function getPastOrdersByShoperID(){        $info = $this->getUid();		$pastOrders= [];		if($info){			 if ($info->user_role=='2'){				$Shoper = Shoperinfo::getByUserID($info->user_id);				if($Shoper){                    $pastOrders = OrderModel::getPastOrdersByShoperID($Shoper->sid);                }			}		}               if (!$pastOrders){//            return show(201,'订单不存在');            throw new OrderException();        }        return $pastOrders;    }    // 获取获取骑手 当前所有订单    // http://water.com/api/v1/order/shoper_now    public function getNowOrdersByShoperID(){        $info = $this->getUid();		$nowOrders= [];		if($info){			if ($info->user_role=='2'){				$Shoper = Shoperinfo::getByUserID($info->user_id);                if ($Shoper){                    $nowOrders = OrderModel::getPresentOrdersByShoperID($Shoper->sid);                }			}		}        if (!$nowOrders){            throw new OrderException();        }        return $nowOrders;    }    // 获取骑手 某一个具体订单    public function getOrderOfShoper(){        $id = input("post.id");        $info = $this->getUid();		$order= [];		if($info){			if ($info->user_role=='2'){				$Shoper = Shoperinfo::getByUserID($info->user_id);                if($Shoper){                    $order = OrderModel::getOrderOfShoperID($Shoper->sid,$id);                }			}		}                if (!$order){            throw new OrderException();        }        return $order;    }    // 获取普通用户的所有订单 （前端自行区分）    public function getUserOrders(){        // 获取用户信息        $info = $this->getUid();		$nowOrders=[];		if($info){				$nowOrders = OrderModel::getOrdersByUserID($info->user_id);                if (!$nowOrders){                    throw new OrderException();                }                //更新未支付订单状态                foreach($nowOrders as $k=>$v){                    //var_dump($v->updatetime);die;                    $t = $v->updatetime;                   if($v->order_status == 1 && ( $t+ 1800)< time()){                        $updateNowOrders = OrderModel::get($v->id);                        //return $updateNowOrders;                        $updateNowOrders->order_status = 6;                        $updateNowOrders->updatetime =time();                        $updateNowOrders->save();                    }                }		}        return $nowOrders;    }    // 获取普通用户某个状态下的所有订单    public function getUserOrderStatus(){        // 获取用户信息        $info = $this->getUid();        $validate = new OrderStatus();        $validate->goCheck();        $post = $validate->getDataByRule(input('post.'));        $status = intval($post['status']);        if (!in_array($status,[1,2,3,4,5])){            throw new OrderException();        }        $nowOrders=[];        if($info){                $nowOrders = OrderModel::getOrdersByStatus($info->user_id,$status);                if (!$nowOrders){                    throw new OrderException();                }                //更新未支付订单状态                foreach($nowOrders as $k=>$v){                    //var_dump($v->updatetime);die;                    $t = $v->updatetime;                    if($v->order_status == 1 && ( $t+ 1800)< time()){                        $updateNowOrders = OrderModel::get($v->id);                        //return $updateNowOrders;                        $updateNowOrders->order_status = 6;                        $updateNowOrders->updatetime =time();                        $updateNowOrders->save();                    }                }        }        return $nowOrders;    }    // 获取企业用户的所有订单 （前端自行区分）    public function getBusinessOrders(){        // 获取用户信息        $info = $this->getUid();        $nowOrders=[];        if($info){            $nowOrders = OrderModel::getBusinessOrdersByUserID($info->user_id);            if (!$nowOrders){                throw new OrderException();            }            //更新未支付订单状态            foreach($nowOrders as $k=>$v){                //var_dump($v->updatetime);die;                $t = $v->updatetime;                if($v->order_status == 1 && ( $t+ 1800)< time()){                    $updateNowOrders = OrderModel::get($v->id);                    //return $updateNowOrders;                    $updateNowOrders->order_status = 6;                    $updateNowOrders->updatetime =time();                    $updateNowOrders->save();                }            }        }        return $nowOrders;    }    // 获取普通用户某个状态下的所有订单    public function getBusinessOrderStatus(){        // 获取用户信息        $info = $this->getUid();        $validate = new OrderStatus();        $validate->goCheck();        $post = $validate->getDataByRule(input('post.'));        $status = intval($post['status']);        if (!in_array($status,[1,2,3,4,5])){            throw new OrderException();        }        $nowOrders=[];        if($info){            $nowOrders = OrderModel::getBusinessOrdersByStatus($info->user_id,$status);            if (!$nowOrders){                throw new OrderException();            }            //更新未支付订单状态            foreach($nowOrders as $k=>$v){                //var_dump($v->updatetime);die;                $t = $v->updatetime;                if($v->order_status == 1 && ( $t+ 1800)< time()){                    $updateNowOrders = OrderModel::get($v->id);                    //return $updateNowOrders;                    $updateNowOrders->order_status = 6;                    $updateNowOrders->updatetime =time();                    $updateNowOrders->save();                }            }        }        return $nowOrders;    }    // 获取个人用户已完成未评价和已完成已评价的所有订单    public function getCompleteUserOrders(){        // 获取用户信息        $info = $this->getUid();        $validate = new OrderStatus();        $validate->goCheck();        $post = $validate->getDataByRule(input('post.'));        $status = intval($post['status']);        if (!in_array($status,[4,5])){            throw new OrderException();        }        $nowOrders=[];        if($info){            $nowOrders = OrderModel::getCompleteOrders($info->user_id);            if (!$nowOrders){                throw new OrderException();            }        }        return $nowOrders;    }    // 获取企业用户已完成未评价和已完成已评价的所有订单    public function getCompleteBusinessOrders(){        // 获取用户信息        $info = $this->getUid();        $validate = new OrderStatus();        $validate->goCheck();        $post = $validate->getDataByRule(input('post.'));        $status = intval($post['status']);        if (!in_array($status,[4,5])){            throw new OrderException();        }        $nowOrders=[];        if($info){            $nowOrders = OrderModel::getBusinessCompleteOrders($info->user_id);            if (!$nowOrders){                throw new OrderException();            }        }        return $nowOrders;    }    // 获取token和订单ID获取某一具体订单    public function getOrderOne(){        //验证传入值        $validate = new OrderGet();        $validate->goCheck();        $post = $validate->getDataByRule(input('post.'));//        $info = $this->getUid();        $order_id = $post['id'];//		if($info){////			 if ($info->user_role==1 || $info->user_role ==4){      // 个人或企业//				$nowOrders = OrderModel::getOrdersUserID($info->user_id,$order_id);//			 }elseif ($info->user_role==2){                          // 骑手//                $nowOrders = OrderModel::getShoperOrderOne($info->user_id,$order_id);//            }elseif ($info->user_role==3){       // 商家//			     $shop = Shop::getByUserID($info->user_id);//			     if (!$shop){//                     return show(201,'商家未找到');//                 }//                $nowOrders = OrderModel::getShopOrderOne($shop->shop_id,$order_id);//            }//		}        $nowOrders = OrderModel::getDetailOrder($order_id);        if (!$nowOrders){            return show(201,'订单未找到');        }        //$nowOrders->updatetime = date("Y-m-d H:i",$nowOrders->updatetime);        return show(200,'订单获取成功',['nowOrders'=>$nowOrders]);    }    // 获取商家的所有订单 （前端自行区分）    public function getShopUserOrders(){        $info = $this->getUid();		$nowOrders = [];		if($info){			if ($info->user_role=='3'){				$Shop = Shop::getByUserID($info->user_id);				if(!$Shop){					throw new OrderException();				}				$nowOrders = OrderModel::getShopOrdersByUserID($Shop->shop_id);			}		}                if (!$nowOrders){            throw new OrderException();        }        return $nowOrders;    }    // 获取商家的未发货的订单    public function getShopPresentOrders()    {        $info = $this->getUid();        $nowOrders = [];        if ($info) {            if ($info->user_role == '3') {                $Shop = Shop::getByUserID($info->user_id);                if($Shop){                    $nowOrders = OrderModel::getShopPresentOrders($Shop->shop_id);                }            }        }        if (!$nowOrders) {            throw new OrderException();        }        return $nowOrders;    }    // 获取商家的历史的订单（已评价未发货和已评价已发货）    public function getShopPastOrders()    {        $info = $this->getUid();        $nowOrders = [];        if ($info) {            if ($info->user_role == '3') {                $Shop = Shop::getByUserID($info->user_id);                if ($Shop){                    $nowOrders = OrderModel::getShopPastOrders($Shop->shop_id);                }            }        }        if (!$nowOrders) {            throw new OrderException();        }        return $nowOrders;    }        //商家派单    public function dispatchOrders(){        $id = input("post.id");        $sid = input("post.sid");//        halt($id.'-----------'.$sid);        $info = $this->getUid();        if ($info->user_role!='3'){            return ["code"=>-200,"msg"=>"您不是商家无权派单！"];        }        $order = OrderModel::get($id);//        $shoperMessage = Shoperinfo::get($sid);//        $shoperMessage = User::get($shoperMessage->user_id);        if (!$order){            return ["code"=>-201,"msg"=>"订单不存在！"];        }        if ($order->shoper_id!=null){            return ["code"=>-202,"msg"=>"该订单已派"];        }        $order->save(['shoper_id'=>$sid,'order_status'=> 3],['id' =>$id]);        //发起支付//        $shoper_openid = $shoperMessage->user_wxid;//        $notify_url = 'https://www.dreamus.net/api/v1/order/payThisOrderNotify';//        $app_id = config('paySet.app_id');//        $mch_id = config('paySet.mch_id');//        $key = config('paySet.key');//        $total_fee = floatval(1*100);//        $out_trade_no = 'send'.'_'.time();//        $body = '支付测试';//        //生成签名，返回给小程序//        $pay = new WeiXinPay($app_id, $shoper_openid, $mch_id, $key, $out_trade_no, $body, $total_fee,$notify_url);//        $return = $pay->pay();//        $package = explode("=",$return['package']);//        $shoper_prepayid = $package[1];////        halt($shoper_openid.'--------'.$shoper_prepayid);////        try{//            $cost = 22;//            $msg = '有没有信息啊';//            $dmsgs = new ShoperMessage();//            $dmsgs->sendShoperMessage($shoper_prepayid,$shoper_openid,'2017012012250',$cost,$msg);//            return ["code"=>200,"msg"=>"发了没？"];//        }catch (\Exception $e){////        }        try{            $formid = $order->prepay_id;            $user_id = $order->user_id;     // 用户的user_id            $m_user = User::getByUserID($user_id);            $openid = $m_user->user_wxid;//'oyeOJ5S95SkN0UNMGFuGkzbZFeog';			$msg = '商家已派单';            $shop_id = $order->shop_id;            $shop_info = Shop::getByShopID($shop_id);            $cost = $shop_info->service_fee;            $dmsg = new DeliveryMessage();            $dmsg->sendDeliveryMessage($formid,$openid,$order->order_id,$cost,$msg);            //halt($openid.'----------'.$formid);        }catch(\Exception $e){            return ["code"=>200,"msg"=>"派单成功，但用户模板未发送"];//            return ["code"=>200,"msg"=>"派单成功"];        }               return ["code"=>200,"msg"=>"派单成功"];    }    //确定订单 用户确认的    public function dispatchOrdersOk(){        $id = input("post.id");        $info = $this->getUid();//        if ($info->user_role!=2 && $info->user_role!=3){//            return ["code"=>-200,"msg"=>"您无权！"];//        }        if ($info->user_role==3 || $info->user_role==2){            return show(201,'你无权确认订单');        }        $order = OrderModel::get($id);        if (!$order){            return show(202,'订单不存在！');        }        try{            $order->save(['order_status'=>4,'senddate'=>time()],['id' =>$id]);        }catch (\Exception $e){            return show(203,'确定失败，请重试');        }        return show(200,'确定成功');    }    // 获取商家的待发货的订单数量    public function getShopWaitingOrder(){        $shop_id = input("post.shop_id");        $count = 0;        if (!$shop_id){            return show(200,'获取成功',['count'=>$count]);        }        $count = Db::table('sbw_order')->where('order_status',2)->where('shop_id',$shop_id)->count();        return show(200,'获取成功',['count'=>$count]);    }    // 获取普通用户的待发货的订单数量    public function getUserWaitingOrder(){        $info = $this->getUid();        $count_1 = 0;        $count_3 = 0;        $count_2 = 0;        if (!$info){            return show(200,'获取成功',['count_1'=>$count_1,'count_2'=>$count_2,'count_3'=>$count_3]);        }        try{            $ntime = time()-1800;            $mdata['order_status'] = 6;            $mdata['updatetime'] = time();            Db::table('sbw_order')->where('order_status',1)->where('user_id',$info->user_id)->where('is_business',0)->where('o_builddate','<',$ntime)->update($mdata);        }catch (Exception $e){        }        $count_1 = Db::table('sbw_order')->where('order_status',1)->where('user_id',$info->user_id)->where('is_business',0)->count();        $count_2 = Db::table('sbw_order')->where('order_status',2)->where('user_id',$info->user_id)->where('is_business',0)->count();        $count_3 = Db::table('sbw_order')->where('order_status',3)->where('user_id',$info->user_id)->where('is_business',0)->count();        return show(200,'获取成功',['count_1'=>$count_1,'count_2'=>$count_2,'count_3'=>$count_3]);    }    // 获取普通用户的待发货的订单数量    public function getBusinessWaitingOrder(){        $info = $this->getUid();        $count_1 = 0;        $count_3 = 0;        $count_2 = 0;        if (!$info){            return show(200,'获取成功',['count_1'=>$count_1,'count_2'=>$count_2,'count_3'=>$count_3]);        }		try{            $ntime = time()-1800;            $mdata['order_status'] = 6;            $mdata['updatetime'] = time();            Db::table('sbw_order')->where('order_status',1)->where('user_id',$info->user_id)->where('is_business',1)->where('o_builddate','<',$ntime)->update($mdata);        }catch (Exception $e){        }        $count_1 = Db::table('sbw_order')->where('order_status',1)->where('user_id',$info->user_id)->where('is_business',1)->count();        $count_2 = Db::table('sbw_order')->where('order_status',2)->where('user_id',$info->user_id)->where('is_business',1)->count();        $count_3 = Db::table('sbw_order')->where('order_status',3)->where('user_id',$info->user_id)->where('is_business',1)->count();        return show(200,'获取成功',['count_1'=>$count_1,'count_2'=>$count_2,'count_3'=>$count_3]);    }}